services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: logdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data


  #Лидеры партиций будут распределены между брокерами.
  #Если один брокер падает, второй берёт на себя роль лидера для его партиций
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_KRAFT_CLUSTER_ID: "q-xHRIeZQlukEfhEjz9pQQ"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093,2@kafka-2:9095"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"

      #TODO в дальнейшем надо будет настроить (SSL, SASL)
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"

      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"

    volumes:
      - C:/kafka/kafka-tools/temp/volumes/server-1:/bitnami/kafka
    networks:
      - kafka-net

  kafka-2:
    image: bitnami/kafka:latest
    container_name: kafka-2
    restart: always
    ports:
      - "9094:9092"   # Клиентский порт
      - "9095:9093"   # Контроллерский порт
    environment:
      KAFKA_CFG_NODE_ID: 2
      KAFKA_KRAFT_CLUSTER_ID: "q-xHRIeZQlukEfhEjz9pQQ"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"  # Добавлен контроллер
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093,2@kafka-2:9095"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://kafka-2:9092,CONTROLLER://kafka-2:9095"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-2:9092"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
    volumes:
      - C:/kafka/kafka-tools/temp/volumes/server-2:/bitnami/kafka
    networks:
      - kafka-net

  log-producer:
    build: ./log-producer
    container_name: log-producer
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      LOGGING_LEVEL_ROOT: DEBUG
      SERVER_PORT: 8081
    volumes:
      - C:\Users\TBG\IdeaProjects\log-analytics-system\log-producer\src\main\resources\application.yml:/application.yaml
    networks:
      - kafka-net

  log-processor:
    image: log-processor:latest
    container_name: log-processor
    depends_on:
      - kafka
      - postgres
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/logdb
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SERVER_PORT: 8082
    networks:
      - monitoring
      - kafka-net

  log-api:
    image: log-api:latest
    container_name: log-api
    depends_on:
      - postgres
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/logdb
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SERVER_PORT: 8083
    networks:
      - monitoring

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    volumes:
#      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
#    networks:
#      - monitoring

#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    depends_on:
#      - prometheus
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    networks:
#      - monitoring


  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    restart: always
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_PORT: 9000
    networks:
      - kafka-net



volumes:
  pg_data:
  kafka_data:

networks:
  kafka-net:
    driver: bridge
  monitoring:
    driver: bridge
